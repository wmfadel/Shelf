// Mocks generated by Mockito 5.3.2 from annotations
// in authentication/test/authentication_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:authentication/src/firebase_auth_wrapper.dart' as _i7;
import 'package:authentication/src/firebase_user_store.dart' as _i5;
import 'package:authentication/src/user_secure_storage.dart' as _i2;
import 'package:domain_models/domain_models.dart' as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:location_service/src/location_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserSecureStorage extends _i1.Mock implements _i2.UserSecureStorage {
  MockUserSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> upsertUserInfo({required _i4.AppUser? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsertUserInfo,
          [],
          {#user: user},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<_i4.AppUser?> getUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [],
        ),
        returnValue: _i3.Future<_i4.AppUser?>.value(),
      ) as _i3.Future<_i4.AppUser?>);
  @override
  _i3.Future<void> deleteUserInfo() => (super.noSuchMethod(
        Invocation.method(
          #deleteUserInfo,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [FirebaseUserStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseUserStore extends _i1.Mock implements _i5.FirebaseUserStore {
  MockFirebaseUserStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.AppUser?> fetchRemoteUser({required _i6.User? authUser}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRemoteUser,
          [],
          {#authUser: authUser},
        ),
        returnValue: _i3.Future<_i4.AppUser?>.value(),
      ) as _i3.Future<_i4.AppUser?>);
  @override
  _i3.Future<void> createRemoteUser({required _i4.AppUser? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRemoteUser,
          [],
          {#user: user},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [FirebaseAuthWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthWrapper extends _i1.Mock
    implements _i7.FirebaseAuthWrapper {
  MockFirebaseAuthWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i6.User?> authenticateWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #authenticateWithGoogle,
          [],
        ),
        returnValue: _i3.Future<_i6.User?>.value(),
      ) as _i3.Future<_i6.User?>);
  @override
  _i3.Future<_i6.User?> authenticateWithTwitter() => (super.noSuchMethod(
        Invocation.method(
          #authenticateWithTwitter,
          [],
        ),
        returnValue: _i3.Future<_i6.User?>.value(),
      ) as _i3.Future<_i6.User?>);
  @override
  _i3.Future<_i6.User?> loginWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i3.Future<_i6.User?>.value(),
      ) as _i3.Future<_i6.User?>);
  @override
  _i3.Future<_i6.User?> registerWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i3.Future<_i6.User?>.value(),
      ) as _i3.Future<_i6.User?>);
  @override
  _i3.Future<_i6.User?> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i3.Future<_i6.User?>.value(),
      ) as _i3.Future<_i6.User?>);
  @override
  _i3.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i8.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.AppLocation?> getUserLocation() => (super.noSuchMethod(
        Invocation.method(
          #getUserLocation,
          [],
        ),
        returnValue: _i3.Future<_i4.AppLocation?>.value(),
      ) as _i3.Future<_i4.AppLocation?>);
  @override
  _i3.Stream<_i4.AppLocation?> getUserLocationStream() => (super.noSuchMethod(
        Invocation.method(
          #getUserLocationStream,
          [],
        ),
        returnValue: _i3.Stream<_i4.AppLocation?>.empty(),
      ) as _i3.Stream<_i4.AppLocation?>);
}
